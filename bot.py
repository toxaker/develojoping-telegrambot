import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    MessageHandler,
)

from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
FORWARD_CHAT_ID = os.getenv('FORWARD_CHAT_ID')
token = TOKEN
# –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
if TOKEN:
    print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–æ–∫–µ–Ω–∞
else:
    print("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

level=logging.INFO

format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext

# –≠—Ç–∞–ø—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MENU_ACTION, ASK_FAQ, ADMIN_AUTH, ADMIN_SECTION, MESSAGE_FORWARD = range(5)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å\n"
        "/about_me - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ\n"
        "/social_media - –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏\n"
        "/services - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö\n"
    )
        
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text)

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
if TOKEN:
    print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {TOKEN[:5]}...")
else:
    print("–¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

def chunk_buttons(buttons, chunk_size=3):
    return [buttons[i:i + chunk_size] for i in range(0, len(buttons), chunk_size)]

async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_menu_buttons = [
        InlineKeyboardButton('‚ÑπÔ∏è INFO', callback_data='info'),
        InlineKeyboardButton('üìÉ FAQ', callback_data='faq'),
        InlineKeyboardButton('üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='feedback'),
        InlineKeyboardButton('üë§ –û–±–æ –º–Ω–µ', callback_data='about_me'),
        InlineKeyboardButton('üîó –°–æ—Ü.—Å–µ—Ç–∏', callback_data='social_media'),
        InlineKeyboardButton('üõ†Ô∏è –£—Å–ª—É–≥–∏', callback_data='services'),
        InlineKeyboardButton('‚ùì –í–æ–ø—Ä–æ—Å?', callback_data='question'),
    ]

    chunked_buttons = chunk_buttons(main_menu_buttons, 3)
    formatted_buttons = []
    for i in range(max(len(chunked_buttons[0]), len(chunked_buttons[-1]))):
        row = []
        for chunk in chunked_buttons:
            if i < len(chunk):
                row.append(chunk[i])
        formatted_buttons.append(row)
    
    menu_text = "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=menu_text, 
        reply_markup=InlineKeyboardMarkup(formatted_buttons), 
        parse_mode='HTML'
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –ø–æ –∏–º–µ–Ω–∏ –¢–æ—Ö–∞–±–æ—Ç. –Ø - –ø—Ä–æ–≥—Ä–∞–º–º–∞-–≤–µ–±–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ BOT API, –Ω–∞ —è–∑—ã–∫–µ Python –≤–æ—Ç —ç—Ç–∏–º –∫–æ–∂–∞–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º - @toxakalinin.\n –Ø –º–Ω–æ–≥–æ —á–µ–≥–æ —É–º–µ—é –∏ –∑–Ω–∞—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n 1. –í—Å—é –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç—É –∏ –µ–≥–æ —É—Å–ª—É–≥–∞–º\n 2. –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö\n 3. –ü—Ä–∞–π—Å, –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ - –≤—Å–µ –∑–Ω–∞—é!\n –ê –µ—Å–ª–∏ —á–µ–≥–æ —Ç–æ –∏ –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å - –º–æ–≥—É –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¢–æ—Ö–µ-—á–µ–ª–æ–≤–µ–∫—É –≤–∞—à –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.\n –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "/help", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text)
    await send_main_menu(update, context)
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'faq':
        await faq(query, context)
    elif query.data == 'info':
        await info(query, context)
    elif query.data == 'feedback':
        await feedback(query, context)
    elif query.data == 'about_me':
        await about_me(query, context)
    elif query.data == 'back':
        await back(update, context)
    elif query.data == 'social_media':
        await social_media(query, context)
    elif query.data == 'services':
        await services(query, context)
    elif query.data.startswith('faq_'):
        index = int(query.data.split('_')[1])
        await query.message.reply_text(text=FAQ_ANSWERS[index], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='send_main_menu')]]))
    elif query.data == 'price':
        await price(query, context)
    elif query.data == 'types':
        await types(query, context)
    elif query.data.startswith('price_'):
        await show_price_info(query, context)
    elif query.data.startswith('service_'):
        await show_service_info(query, context)


   

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_text = "–Ø –±—ã–ª —Ä–æ–∂–¥–µ–Ω –∏–∑ –∫—Ä–æ–≤–∏ –∏ –ø–æ—Ç–∞, —Ü–µ–Ω–æ–π —Å—Ç–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –Ω–µ—Ä–≤–æ–≤, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–∫—Ä—ã—Ç—ã–π ***–º–∏, –Ω–æ —Ç–∞–∫–æ–π –∂–µ–ª–∞–Ω–Ω—ã–π. –Ø - –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=info_text)

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    info_text = "–Ø –±—ã–ª —Ä–æ–∂–¥–µ–Ω –∏–∑ –∫—Ä–æ–≤–∏ –∏ –ø–æ—Ç–∞, —Ü–µ–Ω–æ–π —Å—Ç–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏ –Ω–µ—Ä–≤–æ–≤, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–∫—Ä—ã—Ç—ã–π ***–º–∏, –Ω–æ —Ç–∞–∫–æ–π –∂–µ–ª–∞–Ω–Ω—ã–π. –Ø - –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –≤—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é."
    await query.message.reply_text(text=info_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]]))

FAQ_QUESTIONS = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–µ–∫—Ç '–¢–æ—Ö–∞ –ö–∞–ª–∏–Ω–∏–Ω' –∏ –∫–∞–∫–æ–≤–∞ –µ–≥–æ —Ü–µ–ª—å?",
    "–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç?",
    "–°–æ–∑–¥–∞–µ—Ç –ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ?",
    "–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –≤–µ–±-—Å–∞–π—Ç –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?",
    "–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞?",
    "–ö–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –∏ —Ñ–∏–¥–±—ç–∫ –æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?",
    "–ß—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –ø–æ–¥ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º digital –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º?",
    "–ú–æ–∂–Ω–æ –ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ?",
    "–î–æ–ø—É—Å—Ç–∏–º, —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω.",
    "–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ —ç—Ç–æ–º",
]

FAQ_ANSWERS = [
    "–ü—Ä–æ–µ–∫—Ç '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' ‚Äî —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤, SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —É—Å–ª—É–≥. –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ø–æ–º–æ—á—å –∫–æ–º–ø–∞–Ω–∏—è–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–µ–±—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å.",
    "–ü—Ä–æ–µ–∫—Ç '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥, –≤–∫–ª—é—á–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-—Å–∞–π—Ç–æ–≤, SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–æ—Å—Ç–∏–Ω–≥, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ–º–µ–Ω–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤–µ–±-—Å–∞–π—Ç–æ–≤. –≠—Ç–∏ —É—Å–ª—É–≥–∏ –ø–æ–º–æ–≥–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—è–º —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—é –æ–Ω–ª–∞–π–Ω-–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∏ –¥–æ—Å—Ç–∏—á—å –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–µ–π.",
    "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥ '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –≤–∫–ª—é—á–∞—é—Ç –≤ —Å–µ–±—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–µ–∫—Ç—É, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö –∫–ª–∏–µ–Ω—Ç–∞, –æ–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.",
    "–ù–∞ –≤–µ–±-—Å–∞–π—Ç–µ '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —É—Å–ª—É–≥–∞—Ö, –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.",
    "–î–ª—è —Å–≤—è–∑–∏ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞–º–∏. –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'.",
    "–û—Ç–∑—ã–≤—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–æ–µ–∫—Ç–µ '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ. –ö–ª–∏–µ–Ω—Ç—ã –æ—Ç–º–µ—á–∞—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∫–æ–º–∞–Ω–¥—ã, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏—Ö –±–∏–∑–Ω–µ—Å–∞.",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –≤–∫–ª—é—á–∞—é—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –¥–∏–∑–∞–π–Ω –≤–µ–±-—Å–∞–π—Ç–æ–≤, SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ö–æ—Å—Ç–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É. –ü—Ä–æ–µ–∫—Ç —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞.",
    "–ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω', –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ'. –ö–∞–∂–¥—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á, —Ä–µ—à–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã, –∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏ —É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç.",
    "–ü—Ä–æ–µ–∫—Ç '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω' –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ø—Ä–æ–µ–∫—Ç–æ–º '–Ø–º—Ç–æ—Ö –ö–∞–ª–∏–Ω–∏–Ω', –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥–µ—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–ª–∞–Ω —Ä–∞–±–æ—Ç",
    "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - –≤–∞—à —Ç–∞–∫–æ–π –∂–µ —Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥ –∏ –ø–æ–º–æ—â–Ω–∏–∫ –≤ –Ω–∞—à–µ–º –Ω–µ–ª–µ–≥–∫–æ–º –¥–µ–ª–µ, –∫–∞–∫ –∏ —è. –≠—Ç–æ –æ—Å–æ–±—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –≤–µ–±—Å–∞–π—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π, –±—É–¥—å –º—ã –ø–∏—Ä–∞—Ç–∞–º–∏, —Ç–æ—á–Ω–æ –º—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫–æ–º –Ω–∞ –∫–∞—Ä—Ç–µ. –ù–∞—Å—Ç–æ—è—â–∞—è –∫–ª–∞–¥–µ–∑—å –∑–Ω–∞–Ω–∏–π –∏ –º—É–¥—Ä–æ—Å—Ç–∏, –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∞—è —Ç–µ–æ—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–∏–Ω–≥–µ, —Ü–∏—Ñ—Ä–æ–≤–æ–º –±—Ä–µ–Ω–¥–∏–Ω–≥–µ, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ, –≤–µ–±-—É—Å–ª—É–≥–∞—Ö –∏ –µ—â–µ –û–û–û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ\n –ê –≤–æ—Ç –∏ —Å—Å—ã–ª–æ—á–∫–∞ –Ω–∞ —Ä–µ—Å—É—Ä—Å:\n url = https://iamtoxakalinin.ru/thebaseofknowledge/ " ,

]


async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    faq_buttons = [
        InlineKeyboardButton('–¢–û–•–ê??', callback_data='faq_0'),
        InlineKeyboardButton('–¶–µ–ª–∏', callback_data='faq_1'),
        InlineKeyboardButton('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è', callback_data='faq_2'),
        InlineKeyboardButton('–û —Ä–µ—Å—É—Ä—Å–µ', callback_data='faq_3'),
        InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='faq_4'),
        InlineKeyboardButton('–û—Ç–∑—ã–≤—ã', callback_data='faq_5'),
        InlineKeyboardButton('–ú—ã - –ø—Ä–æ—Ñ–∏', callback_data='faq_6'),
        InlineKeyboardButton('–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', callback_data='faq_7'),
        InlineKeyboardButton('–†–∞–±–æ—Ç–∞–µ–º?', callback_data='faq_8'),
        InlineKeyboardButton('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', callback_data='faq_9')
    ]
    chunked_buttons = chunk_buttons(faq_buttons)
    chunked_buttons.append([InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')])
    await query.message.reply_text(text='‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>', reply_markup=InlineKeyboardMarkup(chunked_buttons), parse_mode='HTML')

async def answer_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    index = int(query.data.split('_')[1])
    answer_text = FAQ_ANSWERS[index]
    back_button = [[InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='faq')]]
    await query.message.edit_text(text=answer_text, reply_markup=InlineKeyboardMarkup(back_button), parse_mode='HTML')
    
async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    feedback_buttons = [
        [InlineKeyboardButton('‚úçüèª –§–æ—Ä–º–∞ –¥–ª—è –∂–∞–ª–æ–±/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', url='https://iamtoxakalinin.ru/home/social/contactme/')],
        [InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ...', callback_data='report')],
        [InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url='https://iamtoxakalinin.ru/home/business/feedback/')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', reply_markup=InlineKeyboardMarkup(feedback_buttons))

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    report_buttons = [
        [InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Email', url='https://mailto:anonymity.provider597@simplelogin.com')],
        [InlineKeyboardButton('–ß–∞—Ç-–±–æ—Ç—É —á–µ—Ä–µ–∑ —Å–∞–π—Ç', url='https://iamtoxakalinin.ru/home/social/media/')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', reply_markup=InlineKeyboardMarkup(report_buttons))

async def about_me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    about_me_text = "–Ø - –±–æ—Ç, —Ç–æ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞. –ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –∏–º—è! –Ø - –¢–æ—Ö–∞–±–æ—Ç, –¢–µ–ª–µ–≥—Ä–∞–º-—á–∞—Ç-–±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ BOT API, –Ω–∞ —è–∑—ã–∫–µ Python.\n –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª —ç—Ç–æ—Ç –∫–æ–∂–∞–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ - @toxakalinin, –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–º—É –ª–µ–Ω—å –æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏, –Ω–æ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –∂–º–æ—Ç, —á—Ç–æ–±—ã –Ω–∞–Ω–∏–º–∞—Ç—å –Ω–∞ —ç—Ç—É —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ–∫–∞. –¢–µ–º –±–æ–ª–µ–µ –ø–ª–∞—Ç–∏—Ç—å –µ–º—É, –æ–Ω –º–Ω–µ —Ç–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç.. –ë—É–¥—å —è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –ø–æ—É–º–Ω–µ–µ, —à–µ–ª –±—ã –Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç.\n –í–ø—Ä–æ—á–µ–º —è –∑–∞–±–æ–ª—Ç–∞–ª—Å—è, —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –≤—ã –º–æ–∂–µ—Ç–µ, –ø–æ—Å–µ—Ç–∏–≤ –≤–µ–±—Å–∞–π—Ç –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"
    await query.message.reply_text(text=about_me_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]]))

async def social_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    social_buttons = [
        [InlineKeyboardButton('Github', url='https://github.com/toxakalinin')],
        [InlineKeyboardButton('Facebook', url='https://www.facebook.com/toxxxakalinin/')],
        [InlineKeyboardButton('–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ (—à—É—á—É, Mastodon)', url='https://mastodon.social/@toxakalinin')],
        [InlineKeyboardButton('X', url='https://x.com/toxakalinin')],
        [InlineKeyboardButton('Patreon', url='https://patreon.com/toxakalinin')],
        [InlineKeyboardButton('Telegram WebApp and channel', url='https://t.me/iamtoxakalinin_bot')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.reply_text(text='–ú–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:', reply_markup=InlineKeyboardMarkup(social_buttons))

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–ª:')
    return "QUESTION"

async def forward_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    await context.bot.send_message(chat_id=FORWARD_CHAT_ID, text=f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username}:\n\n{user_message}")
    await update.message.reply_text('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!')
    return "END"

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_main_menu(update, context)
    return MENU_ACTION

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–π—Å–µ –∏ —É—Å–ª—É–≥–∞—Ö
price_info = {
    'price_1': '–ü—Ä–∞–π—Å 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 1...',
    'price_2': '–ü—Ä–∞–π—Å 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 2...',
    'price_3': '–ü—Ä–∞–π—Å 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 3...',
    'price_4': '–ü—Ä–∞–π—Å 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 4...',
    'price_5': '–ü—Ä–∞–π—Å 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 5...',
    'price_6': '–ü—Ä–∞–π—Å 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 6...',
    'price_7': '–ü—Ä–∞–π—Å 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 7...',
    'price_8': '–ü—Ä–∞–π—Å 8: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 8...',
    'price_9': '–ü—Ä–∞–π—Å 9: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ 9...'
}

service_info = {
    'service_1': '–£—Å–ª—É–≥–∞ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 1...',
    'service_2': '–£—Å–ª—É–≥–∞ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 2...',
    'service_3': '–£—Å–ª—É–≥–∞ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 3...',
    'service_4': '–£—Å–ª—É–≥–∞ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 4...',
    'service_5': '–£—Å–ª—É–≥–∞ 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 5...',
    'service_6': '–£—Å–ª—É–≥–∞ 6: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 6...',
    'service_7': '–£—Å–ª—É–≥–∞ 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 7...',
    'service_8': '–£—Å–ª—É–≥–∞ 8: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 8...',
    'service_9': '–£—Å–ª—É–≥–∞ 9: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ 9...'
}

# –ú–µ–Ω—é "–£—Å–ª—É–≥–∏"
async def services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    services_buttons = [
        [InlineKeyboardButton('–¶–µ–Ω—ã', callback_data='price')],
        [InlineKeyboardButton('–í–∏–¥—ã —É—Å–ª—É–≥', callback_data='types')],
        [InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')]
    ]
    await query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=InlineKeyboardMarkup(services_buttons))

# –ú–µ–Ω—é "–¶–µ–Ω—ã"
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    price_buttons = [
        [InlineKeyboardButton(f'–ü—Ä–∞–π—Å {i}', callback_data=f'price_{i}') for i in range(1, 4)],
        [InlineKeyboardButton(f'–ü—Ä–∞–π—Å {i}', callback_data=f'price_{i}') for i in range(4, 7)],
        [InlineKeyboardButton(f'–ü—Ä–∞–π—Å {i}', callback_data=f'price_{i}') for i in range(7, 10)],
        [InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='services')]
    ]
    await query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=InlineKeyboardMarkup(price_buttons))

# –ú–µ–Ω—é "–í–∏–¥—ã —É—Å–ª—É–≥"
async def types(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    types_buttons = [
        [InlineKeyboardButton(f'–£—Å–ª—É–≥–∞ {i}', callback_data=f'service_{i}') for i in range(1, 4)],
        [InlineKeyboardButton(f'–£—Å–ª—É–≥–∞ {i}', callback_data=f'service_{i}') for i in range(4, 7)],
        [InlineKeyboardButton(f'–£—Å–ª—É–≥–∞ {i}', callback_data=f'service_{i}') for i in range(7, 10)],
        [InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='services')]
    ]
    await query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —É—Å–ª—É–≥–∏:', reply_markup=InlineKeyboardMarkup(types_buttons))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–π—Å–µ
async def show_price_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    info = price_info[query.data]
    await query.message.edit_text(text=info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='price')]]))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ
async def show_service_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    info = service_info[query.data]
    await query.message.edit_text(text=info, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥', callback_data='types')]]))

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    
    start_handler = CommandHandler('start', start)
    send_main_menu_handler = CommandHandler('send_main_menu', send_main_menu)
    help_handler = CommandHandler('help', help_command)
    callback_handler = CallbackQueryHandler(back, pattern='main_menu')
    info_handler = CallbackQueryHandler(info, pattern='info')
    application.add_handler(CallbackQueryHandler(faq, pattern=r'^faq$'))
    application.add_handler(CallbackQueryHandler(answer_faq, pattern=r'^faq_\d+$'))
    feedback_handler = CallbackQueryHandler(feedback, pattern='feedback')
    report_handler = CallbackQueryHandler(report, pattern='report')
    about_me_handler = CallbackQueryHandler(about_me, pattern='about_me')
    social_media_handler = CallbackQueryHandler(social_media, pattern='social_media')
    services_handler = CallbackQueryHandler(services, pattern='services')
    price_handler = CallbackQueryHandler(price, pattern='price')
    types_handler = CallbackQueryHandler(types, pattern='types')
    application.add_handler(CallbackQueryHandler(ask_question, pattern=r'^question$'))
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), forward_question))

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(show_price_info, pattern=r'^price_\d+$'))
    application.add_handler(CallbackQueryHandler(show_service_info, pattern=r'^service_\d+$'))

    application.add_handler(start_handler)
    application.add_handler(send_main_menu_handler)
    application.add_handler(help_handler)
    application.add_handler(callback_handler)
    application.add_handler(info_handler)
    application.add_handler(feedback_handler)
    application.add_handler(report_handler)
    application.add_handler(about_me_handler)
    application.add_handler(social_media_handler)
    application.add_handler(services_handler)
    application.add_handler(price_handler)
    application.add_handler(types_handler)

    application.run_polling()



    
    
    
